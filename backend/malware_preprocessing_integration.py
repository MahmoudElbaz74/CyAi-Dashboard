"""
Integration example for malware_preprocessing.py with CyAi-Dashboard backend
"""

import logging
from pathlib import Path
from typing import Optional, Dict, Any
from malware_preprocessing import load_model, predict_malware, config

logger = logging.getLogger(__name__)

class MalwarePreprocessingDetector:
    """
    Wrapper class to integrate malware_preprocessing.py with the existing backend
    """
    
    def __init__(self):
        self.model = None
        self.model_loaded = False
        
    def load_model(self) -> bool:
        """
        Load the Xception model from malware_preprocessing
        
        Returns:
            True if model loaded successfully, False otherwise
        """
        try:
            logger.info("Loading Xception model from malware_preprocessing...")
            self.model = load_model()
            self.model_loaded = True
            logger.info("Xception model loaded successfully")
            return True
        except Exception as e:
            logger.error(f"Failed to load Xception model: {e}")
            self.model_loaded = False
            return False
    
    def predict_file(self, file_path: str) -> Dict[str, Any]:
        """
        Predict malware class for a file
        
        Args:
            file_path: Path to the file to analyze
            
        Returns:
            Dictionary with prediction results
        """
        if not self.model_loaded:
            if not self.load_model():
                return {
                    "success": False,
                    "error": "Model not loaded",
                    "predicted_class": "Unknown",
                    "confidence": 0.0
                }
        
        try:
            predicted_class = predict_malware(file_path, self.model)
            
            # Map to binary classification (malicious vs benign)
            is_malicious = predicted_class != "Benign"
            
            # Determine threat level based on malware family
            threat_level = self._get_threat_level(predicted_class)
            
            return {
                "success": True,
                "predicted_class": predicted_class,
                "is_malicious": is_malicious,
                "threat_level": threat_level,
                "confidence": 0.85,  # Default confidence for now
                "malware_family": predicted_class if is_malicious else None,
                "analysis_method": "xception_preprocessing"
            }
            
        except Exception as e:
            logger.error(f"Error predicting file {file_path}: {e}")
            return {
                "success": False,
                "error": str(e),
                "predicted_class": "Unknown",
                "confidence": 0.0
            }
    
    def _get_threat_level(self, predicted_class: str) -> str:
        """
        Determine threat level based on malware family
        
        Args:
            predicted_class: Predicted malware class
            
        Returns:
            Threat level string
        """
        high_threat_families = [
            'CobaltStrike', 'GandCrab', 'RedLineStealer', 'RemcosRAT',
            'SilentBuilder', 'SmokeLoader', 'AsyncRAT', 'AveMariaRAT'
        ]
        
        medium_threat_families = [
            'AgentTesla', 'Formbook', 'Gozi', 'GuLoader', 'Heodo',
            'IcedID', 'Loki', 'LummaStealer', 'NanoCore', 'Prometei'
        ]
        
        if predicted_class == "Benign":
            return "Low"
        elif predicted_class in high_threat_families:
            return "High"
        elif predicted_class in medium_threat_families:
            return "Medium"
        else:
            return "Medium"  # Default for unknown families
    
    def get_model_info(self) -> Dict[str, Any]:
        """
        Get information about the loaded model
        
        Returns:
            Dictionary with model information
        """
        return {
            "model_name": "xception_preprocessing",
            "model_type": "timm_xception",
            "num_classes": config["model"]["num_classes"],
            "classes": config["classes_names"],
            "device": config["device"],
            "loaded": self.model_loaded,
            "checkpoint_path": config["checkpoint_path"]
        }


# Example usage function
def example_usage():
    """
    Example of how to use the MalwarePreprocessingDetector
    """
    detector = MalwarePreprocessingDetector()
    
    # Load model
    if detector.load_model():
        print("Model loaded successfully!")
        
        # Test with a file
        test_file = "samples/test.exe"
        if Path(test_file).exists():
            result = detector.predict_file(test_file)
            print(f"Prediction result: {result}")
        else:
            print(f"Test file {test_file} not found")
        
        # Get model info
        model_info = detector.get_model_info()
        print(f"Model info: {model_info}")
    else:
        print("Failed to load model")


if __name__ == "__main__":
    example_usage()
