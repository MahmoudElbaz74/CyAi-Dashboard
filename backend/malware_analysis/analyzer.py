from fastapi import APIRouter, HTTPException, Depends, UploadFile, File
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import logging
import sys
import os
import tempfile

# Add the backend directory to the path to import models
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models.model_manager import get_model_manager, ModelManager
from models.malware_detector import MalwareDetectionRequest, MalwareDetectionResponse

router = APIRouter()
logger = logging.getLogger(__name__)

class MalwareAnalysisRequest(BaseModel):
    """Request model for malware analysis"""
    file_path: Optional[str] = None
    file_name: Optional[str] = None
    scan_type: Optional[str] = "quick"
    include_family_detection: Optional[bool] = True

class MalwareAnalysisResponse(BaseModel):
    """Response model for malware analysis"""
    is_malicious: bool
    confidence: float
    threat_level: str
    malware_family: Optional[str] = None
    malware_type: Optional[str] = None
    file_info: Dict[str, Any]
    analysis_details: Dict[str, Any]
    recommendations: List[str]

# Dependency injection
def get_model_manager_dependency() -> ModelManager:
    """Dependency to get model manager"""
    return get_model_manager()

@router.post("/analyze", response_model=MalwareAnalysisResponse)
async def analyze_malware(
    request: MalwareAnalysisRequest,
    model_manager: ModelManager = Depends(get_model_manager_dependency)
):
    """
    Analyze a file for malware using pre-trained model
    
    Args:
        request: Malware analysis request
        model_manager: Model manager dependency
        
    Returns:
        Malware analysis result
    """
    try:
        # Get malware detector model
        malware_detector = model_manager.get_malware_detector()
        
        # Create detection request
        detection_request = MalwareDetectionRequest(
            file_path=request.file_path,
            file_name=request.file_name,
            scan_type=request.scan_type,
            include_family_detection=request.include_family_detection
        )
        
        # Analyze the file
        result = malware_detector.analyze_file(detection_request)
        
        return MalwareAnalysisResponse(
            is_malicious=result.is_malicious,
            confidence=result.confidence,
            threat_level=result.threat_level,
            malware_family=result.malware_family,
            malware_type=result.malware_type,
            file_info=result.file_info,
            analysis_details=result.analysis_details,
            recommendations=result.recommendations
        )
        
    except Exception as e:
        logger.error(f"Error in malware analysis: {e}")
        raise HTTPException(status_code=500, detail=f"Malware analysis failed: {str(e)}")

@router.post("/analyze-upload", response_model=MalwareAnalysisResponse)
async def analyze_uploaded_file(
    file: UploadFile = File(...),
    scan_type: str = "quick",
    include_family_detection: bool = True,
    model_manager: ModelManager = Depends(get_model_manager_dependency)
):
    """
    Analyze an uploaded file for malware using pre-trained model
    
    Args:
        file: Uploaded file
        scan_type: Type of scan to perform
        include_family_detection: Whether to include malware family detection
        model_manager: Model manager dependency
        
    Returns:
        Malware analysis result
    """
    try:
        # Read file content
        file_content = await file.read()
        
        # Get malware detector model
        malware_detector = model_manager.get_malware_detector()
        
        # Create detection request with file content
        detection_request = MalwareDetectionRequest(
            file_content=file_content,
            file_name=file.filename,
            scan_type=scan_type,
            include_family_detection=include_family_detection
        )
        
        # Analyze the file
        result = malware_detector.analyze_file(detection_request)
        
        return MalwareAnalysisResponse(
            is_malicious=result.is_malicious,
            confidence=result.confidence,
            threat_level=result.threat_level,
            malware_family=result.malware_family,
            malware_type=result.malware_type,
            file_info=result.file_info,
            analysis_details=result.analysis_details,
            recommendations=result.recommendations
        )
        
    except Exception as e:
        logger.error(f"Error in uploaded file analysis: {e}")
        raise HTTPException(status_code=500, detail=f"File analysis failed: {str(e)}")

@router.post("/analyze-batch", response_model=List[MalwareAnalysisResponse])
async def analyze_batch_files(
    requests: List[MalwareAnalysisRequest],
    model_manager: ModelManager = Depends(get_model_manager_dependency)
):
    """
    Analyze multiple files in batch using pre-trained model
    
    Args:
        requests: List of malware analysis requests
        model_manager: Model manager dependency
        
    Returns:
        List of malware analysis results
    """
    try:
        # Get malware detector model
        malware_detector = model_manager.get_malware_detector()
        
        # Create detection requests
        detection_requests = [
            MalwareDetectionRequest(
                file_path=req.file_path,
                file_name=req.file_name,
                scan_type=req.scan_type,
                include_family_detection=req.include_family_detection
            )
            for req in requests
        ]
        
        # Analyze all files in batch
        results = malware_detector.scan_batch(detection_requests)
        
        # Convert to response format
        response_results = [
            MalwareAnalysisResponse(
                is_malicious=result.is_malicious,
                confidence=result.confidence,
                threat_level=result.threat_level,
                malware_family=result.malware_family,
                malware_type=result.malware_type,
                file_info=result.file_info,
                analysis_details=result.analysis_details,
                recommendations=result.recommendations
            )
            for result in results
        ]
        
        return response_results
        
    except Exception as e:
        logger.error(f"Error in batch malware analysis: {e}")
        raise HTTPException(status_code=500, detail=f"Batch analysis failed: {str(e)}")

@router.get("/model-info")
async def get_malware_analysis_model_info(
    model_manager: ModelManager = Depends(get_model_manager_dependency)
):
    """
    Get information about the malware analysis model
    
    Returns:
        Model information
    """
    try:
        malware_detector = model_manager.get_malware_detector()
        return malware_detector.get_model_info()
    except Exception as e:
        logger.error(f"Error getting model info: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get model info: {str(e)}")

# Legacy YARA-based analyzer (kept for backward compatibility)
class YaraMalwareAnalyzer:
    """Legacy YARA-based malware analyzer"""
    
    def __init__(self, rules_path: str):
        self.rules_path = rules_path
        self.rules = self.load_yara_rules()

    def load_yara_rules(self):
        """Load YARA rules (placeholder - requires yara-python)"""
        # Note: This requires yara-python to be installed
        # try:
        #     import yara
        #     return yara.compile(filepath=self.rules_path)
        # except ImportError:
        #     logger.warning("yara-python not installed, YARA rules disabled")
        #     return None
        logger.warning("YARA rules disabled - using pre-trained model instead")
        return None

    def scan_file(self, file_path: str) -> List[str]:
        """Scan file with YARA rules"""
        if self.rules is None:
            return []
        # matches = self.rules.match(file_path)
        # return [match.rule for match in matches]
        return []

    def scan_directory(self, directory_path: str) -> dict:
        """Scan directory with YARA rules"""
        results = {}
        for root, _, files in os.walk(directory_path):
            for file in files:
                file_path = os.path.join(root, file)
                results[file_path] = self.scan_file(file_path)
        return results