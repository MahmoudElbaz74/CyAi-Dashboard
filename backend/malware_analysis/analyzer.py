from fastapi import APIRouter, HTTPException, Depends, UploadFile, File
from typing import List, Dict, Any, Optional
import os
import logging
import tempfile

from models.malware_detector import (
    MalwareDetectionRequest,
    MalwareDetectionResponse,
    MalwareDetector
)

router = APIRouter()
logger = logging.getLogger(__name__)

# نحمّل الموديل مرة واحدة عند بدء التطبيق
global_detector: MalwareDetector = None

@router.on_event("startup")
def startup_model_loading():
    global global_detector
    global_detector = MalwareDetector()
    logger.info("Global malware detector initialized at startup")

def get_detector() -> MalwareDetector:
    global global_detector
    if global_detector is None:
        raise RuntimeError("MalwareDetector not initialized")
    return global_detector

@router.post("/analyze", response_model=MalwareDetectionResponse)
async def analyze_malware(
    request: MalwareDetectionRequest,
    detector: MalwareDetector = Depends(get_detector)
):
    try:
        result = detector.analyze_file(request)
        return result
    except Exception as e:
        logger.error("Error in analyze endpoint: %s", e)
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/analyze-upload", response_model=MalwareDetectionResponse)
async def analyze_uploaded_file(
    file: UploadFile = File(...),
    scan_type: str = "quick",
    include_family_detection: bool = True,
    detector: MalwareDetector = Depends(get_detector)
):
    try:
        content = await file.read()
        req = MalwareDetectionRequest(
            file_content=content,
            file_name=file.filename,
            scan_type=scan_type,
            include_family_detection=include_family_detection
        )
        result = detector.analyze_file(req)
        return result
    except Exception as e:
        logger.error("Error in analyze-upload endpoint: %s", e)
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/analyze-batch", response_model=List[MalwareDetectionResponse])
async def analyze_batch(
    requests: List[MalwareDetectionRequest],
    detector: MalwareDetector = Depends(get_detector)
):
    try:
        results = detector.scan_batch(requests)
        return results
    except Exception as e:
        logger.error("Error in analyze-batch endpoint: %s", e)
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/model-info")
async def model_info(detector: MalwareDetector = Depends(get_detector)) -> Dict[str, Any]:
    try:
        return detector.get_model_info()
    except Exception as e:
        logger.error("Error in model-info endpoint: %s", e)
        raise HTTPException(status_code=500, detail=str(e))
