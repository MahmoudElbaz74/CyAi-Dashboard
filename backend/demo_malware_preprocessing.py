#!/usr/bin/env python3
"""
Demo script for the malware preprocessing module
Shows all functionality and usage examples
"""

import os
import sys
from pathlib import Path

def main():
    print("Malware Preprocessing Module Demo")
    print("=" * 50)
    
    # Test 1: Basic import and configuration
    print("\n1. Testing module import and configuration...")
    try:
        from malware_preprocessing import config, load_model, predict_malware, batch_predict
        print(f"[OK] Module imported successfully")
        print(f"   - Device: {config['device']}")
        print(f"   - Classes: {len(config['classes_names'])}")
        print(f"   - Checkpoint: {config['checkpoint_path']}")
        print(f"   - Classes: {', '.join(config['classes_names'][:5])}...")
    except Exception as e:
        print(f"[ERROR] Import failed: {e}")
        return
    
    # Test 2: Model loading
    print("\n2. Testing model loading...")
    try:
        model = load_model()
        print(f"[OK] Model loaded successfully")
        print(f"   - Model type: {type(model).__name__}")
        print(f"   - Device: {next(model.parameters()).device}")
    except Exception as e:
        print(f"[ERROR] Model loading failed: {e}")
        return
    
    # Test 3: Create test files
    print("\n3. Creating test files...")
    samples_dir = Path("samples")
    samples_dir.mkdir(exist_ok=True)
    
    # Create different types of test files
    test_files = [
        ("test1.exe", b"This is a test executable file 1"),
        ("test2.exe", b"This is another test executable file 2"),
        ("malware.exe", b"Some suspicious content here"),
        ("clean.exe", b"Clean and safe executable content"),
    ]
    
    for filename, content in test_files:
        file_path = samples_dir / filename
        with open(file_path, "wb") as f:
            f.write(content)
        print(f"   - Created: {filename}")
    
    # Test 4: Single file prediction
    print("\n4. Testing single file prediction...")
    try:
        test_file = samples_dir / "test1.exe"
        result = predict_malware(str(test_file), model)
        print(f"[OK] Prediction successful")
        print(f"   - File: {test_file.name}")
        print(f"   - Predicted class: {result}")
    except Exception as e:
        print(f"[ERROR] Single prediction failed: {e}")
    
    # Test 5: Batch prediction
    print("\n5. Testing batch prediction...")
    try:
        results = batch_predict(str(samples_dir), model)
        print(f"[OK] Batch prediction successful")
        print(f"   - Found {len(results)} files")
        print("   - Results:")
        for filename, prediction in results:
            print(f"     {filename:<15} -> {prediction}")
    except Exception as e:
        print(f"[ERROR] Batch prediction failed: {e}")
    
    # Test 6: Integration wrapper
    print("\n6. Testing integration wrapper...")
    try:
        from malware_preprocessing_integration import MalwarePreprocessingDetector
        
        detector = MalwarePreprocessingDetector()
        if detector.load_model():
            print(f"[OK] Integration wrapper loaded successfully")
            
            # Test prediction with wrapper
            result = detector.predict_file(str(samples_dir / "test1.exe"))
            print(f"   - Wrapper prediction: {result['predicted_class']}")
            print(f"   - Is malicious: {result['is_malicious']}")
            print(f"   - Threat level: {result['threat_level']}")
            
            # Get model info
            model_info = detector.get_model_info()
            print(f"   - Model name: {model_info['model_name']}")
            print(f"   - Model loaded: {model_info['loaded']}")
        else:
            print(f"[ERROR] Integration wrapper failed to load model")
    except Exception as e:
        print(f"[ERROR] Integration wrapper test failed: {e}")
    
    # Test 7: Error handling
    print("\n7. Testing error handling...")
    try:
        # Test with non-existent file
        result = predict_malware("non_existent_file.exe", model)
        print(f"[ERROR] Should have failed for non-existent file")
    except FileNotFoundError:
        print(f"[OK] Properly handled non-existent file")
    except Exception as e:
        print(f"[ERROR] Unexpected error: {e}")
    
    # Test 8: Performance test
    print("\n8. Testing performance...")
    try:
        import time
        
        start_time = time.time()
        for i in range(5):
            test_file = samples_dir / f"test{i%4+1}.exe"
            predict_malware(str(test_file), model)
        end_time = time.time()
        
        avg_time = (end_time - start_time) / 5
        print(f"[OK] Performance test completed")
        print(f"   - Average prediction time: {avg_time:.3f} seconds")
        print(f"   - Total time for 5 predictions: {end_time - start_time:.3f} seconds")
    except Exception as e:
        print(f"[ERROR] Performance test failed: {e}")
    
    # Cleanup
    print("\n9. Cleaning up test files...")
    try:
        for filename, _ in test_files:
            file_path = samples_dir / filename
            if file_path.exists():
                file_path.unlink()
        print(f"[OK] Test files cleaned up")
    except Exception as e:
        print(f"[ERROR] Cleanup failed: {e}")
    
    print("\n" + "=" * 50)
    print("Demo completed successfully!")
    print("\nUsage Examples:")
    print("   from malware_preprocessing import load_model, predict_malware")
    print("   model = load_model()")
    print("   result = predict_malware('file.exe', model)")
    print("   print(result)")
    
    print("\nIntegration with Backend:")
    print("   from malware_preprocessing_integration import MalwarePreprocessingDetector")
    print("   detector = MalwarePreprocessingDetector()")
    print("   detector.load_model()")
    print("   result = detector.predict_file('file.exe')")


if __name__ == "__main__":
    main()
